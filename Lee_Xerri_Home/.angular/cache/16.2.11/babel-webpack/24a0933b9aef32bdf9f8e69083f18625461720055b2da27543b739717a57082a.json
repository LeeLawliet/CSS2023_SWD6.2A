{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/drone.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../services/auth.service\";\nimport * as i5 from \"@angular/common\";\nfunction UpdateDroneComponent_div_0_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Drone Form Not Available.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction UpdateDroneComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"form\", 2);\n    i0.ɵɵlistener(\"ngSubmit\", function UpdateDroneComponent_div_0_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.submitForm());\n    });\n    i0.ɵɵelementStart(2, \"fieldset\")(3, \"div\", 3)(4, \"label\", 4);\n    i0.ɵɵtext(5, \"Serial Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 3)(8, \"label\", 6);\n    i0.ɵɵtext(9, \"Model ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 3)(12, \"label\", 8);\n    i0.ɵɵtext(13, \"Owner ID Card Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"input\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"div\", 3)(16, \"label\", 10);\n    i0.ɵɵtext(17, \"Owner First Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(18, \"input\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\", 3)(20, \"label\", 12);\n    i0.ɵɵtext(21, \"Owner Last Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"input\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"div\", 3)(24, \"label\", 14);\n    i0.ɵɵtext(25, \"Owner Contact Number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(26, \"input\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"div\", 3)(28, \"label\", 16);\n    i0.ɵɵtext(29, \"Owner Email Address\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(30, \"input\", 17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"button\", 18);\n    i0.ɵɵtext(32, \"Submit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(33, UpdateDroneComponent_div_0_div_33_Template, 3, 0, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    let tmp_2_0;\n    let tmp_3_0;\n    let tmp_4_0;\n    let tmp_5_0;\n    let tmp_6_0;\n    let tmp_7_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.droneForm);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"value\", (tmp_1_0 = ctx_r0.droneForm.get(\"serialNumber\")) == null ? null : tmp_1_0.value);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", (tmp_2_0 = ctx_r0.droneForm.get(\"modelId\")) == null ? null : tmp_2_0.value);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", (tmp_3_0 = ctx_r0.droneForm.get(\"ownerIdCardNumber\")) == null ? null : tmp_3_0.value);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", (tmp_4_0 = ctx_r0.droneForm.get(\"ownerFirstName\")) == null ? null : tmp_4_0.value);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", (tmp_5_0 = ctx_r0.droneForm.get(\"ownerLastName\")) == null ? null : tmp_5_0.value);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", (tmp_6_0 = ctx_r0.droneForm.get(\"ownerContactNumber\")) == null ? null : tmp_6_0.value);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", (tmp_7_0 = ctx_r0.droneForm.get(\"ownerEmailAddress\")) == null ? null : tmp_7_0.value);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.droneForm);\n  }\n}\nexport let UpdateDroneComponent = /*#__PURE__*/(() => {\n  class UpdateDroneComponent {\n    constructor(formBuilder, droneService, router, route, authService) {\n      this.formBuilder = formBuilder;\n      this.droneService = droneService;\n      this.router = router;\n      this.route = route;\n      this.authService = authService;\n      this.droneId = +this.route.snapshot.paramMap.get('id');\n    }\n    ngOnInit() {\n      this.droneForm = this.formBuilder.group({\n        serialNumber: ['', [Validators.required]],\n        modelId: ['', [Validators.required]],\n        ownerIdCardNumber: ['', [Validators.required]],\n        ownerFirstName: ['', [Validators.required]],\n        ownerLastName: ['', [Validators.required]],\n        ownerContactNumber: ['', [Validators.required]],\n        ownerEmailAddress: ['', [Validators.required, Validators.email]]\n      });\n      this.loadDroneDetails();\n    }\n    loadDroneDetails() {\n      if (!isNaN(this.droneId)) {\n        this.droneService.getDroneById(this.droneId).subscribe(droneDetails => {\n          this.droneForm.patchValue(droneDetails);\n        });\n      } else {\n        console.error('Invalid drone ID'); // Log an error or take appropriate action\n      }\n    }\n\n    submitForm() {\n      let drone = this.droneForm.value;\n      this.droneService.updateDrone(this.droneId, drone).subscribe(res => {\n        console.log(JSON.stringify(res));\n      });\n      this.router.navigate(['/drones']);\n    }\n    static #_ = this.ɵfac = function UpdateDroneComponent_Factory(t) {\n      return new (t || UpdateDroneComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DroneService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UpdateDroneComponent,\n      selectors: [[\"app-update-drone\"]],\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"card-body\", 4, \"ngIf\"], [1, \"card-body\"], [\"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"txtSerialNumber\"], [\"type\", \"text\", \"formControlName\", \"serialNumber\", \"id\", \"txtSerialNumber\", \"placeholder\", \"Enter Serial Number\", 1, \"form-control\", 3, \"value\"], [\"for\", \"txtModelId\"], [\"type\", \"text\", \"formControlName\", \"modelId\", \"id\", \"txtModelId\", \"placeholder\", \"Enter Model ID\", 1, \"form-control\", 3, \"value\"], [\"for\", \"txtOwnerIdCardNumber\"], [\"type\", \"text\", \"formControlName\", \"ownerIdCardNumber\", \"id\", \"txtOwnerIdCardNumber\", \"placeholder\", \"Enter owner's id card number\", 1, \"form-control\", 3, \"value\"], [\"for\", \"txtOwnerFirstName\"], [\"type\", \"text\", \"formControlName\", \"ownerFirstName\", \"id\", \"txtOwnerFirstName\", \"placeholder\", \"Enter owner's first name\", 1, \"form-control\", 3, \"value\"], [\"for\", \"txtOwnerLastName\"], [\"type\", \"text\", \"formControlName\", \"ownerLastName\", \"id\", \"txtOwnerLastName\", \"placeholder\", \"Enter owner's last name\", 1, \"form-control\", 3, \"value\"], [\"for\", \"txtOwnerContactNumber\"], [\"type\", \"text\", \"formControlName\", \"ownerContactNumber\", \"id\", \"txtOwnerContactNumber\", \"placeholder\", \"Enter owner's contact number\", 1, \"form-control\", 3, \"value\"], [\"for\", \"txtOwnerEmailAddress\"], [\"type\", \"text\", \"formControlName\", \"ownerEmailAddress\", \"id\", \"txtOwnerEmailAddress\", \"placeholder\", \"Enter owner's email address\", 1, \"form-control\", 3, \"value\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-2\"], [4, \"ngIf\"]],\n      template: function UpdateDroneComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, UpdateDroneComponent_div_0_Template, 34, 9, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.droneForm);\n        }\n      },\n      dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n    });\n  }\n  return UpdateDroneComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}