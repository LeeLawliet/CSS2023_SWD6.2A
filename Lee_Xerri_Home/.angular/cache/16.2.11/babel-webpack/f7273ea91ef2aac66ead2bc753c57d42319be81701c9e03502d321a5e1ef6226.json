{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { BehaviorSubject, catchError, of, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.endpoint = \"https://css.teknologija.com/api/auth\";\n    this.accessToken = null;\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    this.httpHeader = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  authenticate(employee) {\n    return this.httpClient.post(this.endpoint, employee, this.httpHeader).pipe(tap(response => {\n      const accessToken = response.accessToken;\n      this.setAccessToken(accessToken);\n      this.isAuthenticatedSubject.next(true);\n    }), catchError(error => {\n      window.alert('Error: Problem logging in, check your entries.');\n      return of();\n    }));\n  }\n  logout() {\n    this.setAccessToken('');\n    this.isAuthenticatedSubject.next(false);\n  }\n  isAuthenticated() {\n    return this.isAuthenticatedSubject.value;\n  }\n  setAccessToken(token) {\n    this.accessToken = token;\n  }\n  getAccessToken() {\n    return this.accessToken;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","catchError","of","tap","AuthService","constructor","httpClient","endpoint","accessToken","isAuthenticatedSubject","isAuthenticated$","asObservable","httpHeader","headers","authenticate","employee","post","pipe","response","setAccessToken","next","error","window","alert","logout","isAuthenticated","value","token","getAccessToken","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/student/CSS2023_SWD6.2A/Lee_Xerri_Home/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable, catchError, of, tap } from \"rxjs\";\nimport { Employee } from \"../dto/emloyee.dto\";\nimport { authRes } from \"../dto/authRes.dto\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    endpoint: string = \"https://css.teknologija.com/api/auth\";\n    private accessToken: string | null = null;\n    private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\n    isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n    httpHeader = {\n        headers: new HttpHeaders({\n            'Content-Type': 'application/json'\n        })\n    }\n\n    constructor(private httpClient: HttpClient) {\n        \n    }\n\n    authenticate(employee: Employee): Observable<authRes> {\n        return this.httpClient.post<authRes>(this.endpoint, employee, this.httpHeader).pipe(\n            tap(response => {\n              const accessToken = response.accessToken;\n              this.setAccessToken(accessToken);\n              this.isAuthenticatedSubject.next(true);\n            }),\n            (\n                catchError((error: HttpErrorResponse) : Observable<authRes> => {\n                    window.alert('Error: Problem logging in, check your entries.');\n                    return of();\n                })\n            )   \n        );\n    }\n\n    logout(): void{\n        this.setAccessToken('');\n        this.isAuthenticatedSubject.next(false);\n    }\n\n    isAuthenticated(): boolean{\n        return this.isAuthenticatedSubject.value;\n    }\n    \n\n    setAccessToken(token: string): void {\n        this.accessToken = token;\n    }\n\n    getAccessToken(): string | null {\n        return this.accessToken;\n    }\n}"],"mappings":"AAAA,SAAwCA,WAAW,QAAoB,sBAAsB;AAE7F,SAASC,eAAe,EAAcC,UAAU,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAOvE,OAAM,MAAOC,WAAW;EAapBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAX9B,KAAAC,QAAQ,GAAW,sCAAsC;IACjD,KAAAC,WAAW,GAAkB,IAAI;IACjC,KAAAC,sBAAsB,GAAG,IAAIT,eAAe,CAAU,KAAK,CAAC;IACpE,KAAAU,gBAAgB,GAAG,IAAI,CAACD,sBAAsB,CAACE,YAAY,EAAE;IAE7D,KAAAC,UAAU,GAAG;MACTC,OAAO,EAAE,IAAId,WAAW,CAAC;QACrB,cAAc,EAAE;OACnB;KACJ;EAID;EAEAe,YAAYA,CAACC,QAAkB;IAC3B,OAAO,IAAI,CAACT,UAAU,CAACU,IAAI,CAAU,IAAI,CAACT,QAAQ,EAAEQ,QAAQ,EAAE,IAAI,CAACH,UAAU,CAAC,CAACK,IAAI,CAC/Ed,GAAG,CAACe,QAAQ,IAAG;MACb,MAAMV,WAAW,GAAGU,QAAQ,CAACV,WAAW;MACxC,IAAI,CAACW,cAAc,CAACX,WAAW,CAAC;MAChC,IAAI,CAACC,sBAAsB,CAACW,IAAI,CAAC,IAAI,CAAC;IACxC,CAAC,CAAC,EAEEnB,UAAU,CAAEoB,KAAwB,IAA0B;MAC1DC,MAAM,CAACC,KAAK,CAAC,gDAAgD,CAAC;MAC9D,OAAOrB,EAAE,EAAE;IACf,CAAC,CACJ,CACJ;EACL;EAEAsB,MAAMA,CAAA;IACF,IAAI,CAACL,cAAc,CAAC,EAAE,CAAC;IACvB,IAAI,CAACV,sBAAsB,CAACW,IAAI,CAAC,KAAK,CAAC;EAC3C;EAEAK,eAAeA,CAAA;IACX,OAAO,IAAI,CAAChB,sBAAsB,CAACiB,KAAK;EAC5C;EAGAP,cAAcA,CAACQ,KAAa;IACxB,IAAI,CAACnB,WAAW,GAAGmB,KAAK;EAC5B;EAEAC,cAAcA,CAAA;IACV,OAAO,IAAI,CAACpB,WAAW;EAC3B;EAAC,QAAAqB,CAAA,G;qBAjDQzB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}